generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Merchant {
  id                  String      @id @unique @default(uuid())
  name                String
  email               String      @unique
  username            String      @unique
  password            String
  pin                 Int 
  type                Shop_type
  walletAddress       String      @unique
  businessName        String
  shopAddress         String
  phoneNumber         String
  gstin               String?
  isActive            Boolean     @default(true)
  isVerified          Boolean     @default(false)
  products            Product[]
  bills               Bill[]
  waiters             Waiter[]
  restaurantDetails   RestaurantDetails?
  generalStoreDetails GeneralStoreDetails?
  
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

model Customer {
  id            String    @id @unique @default(uuid())
  deviceId      String    @unique
  
  walletAddress String    @unique
  
  sessions      CustomerSession[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model CustomerSession {
  id              String    @id @unique @default(uuid())
  customerId      String
  customer        Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  sessionToken    String    @unique
  
  proxyWallet     String    @unique
  
  isActive        Boolean   @default(true)
  expiresAt       DateTime  
  
  bills           Bill[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Waiter {
  id            String    @id @default(uuid())
  merchantId    String
  merchant      Merchant  @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  name          String
  walletAddress String    @unique
  employeeId    String?
  tips          Tip[]
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Product {
  id          String    @id @default(uuid())
  merchantId  String
  merchant    Merchant  @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  
  name        String
  description String?
  price       Float
  
  category    String
  subcategory String?
  
  stock       Int       @default(0)
  
  isAvailable Boolean   @default(true)
  isVeg       Boolean?
  
  brand       String?
  unit        String?
  
  billItems   BillItem[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model EscrowAccount {
  id              String    @id @default(uuid())
  
  escrowWallet    String    @unique
  
  encryptedPrivateKey String
  
  isActive        Boolean   @default(true)
  expiresAt       DateTime  
  
  bill            Bill?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Bill {
  id              String      @id @default(uuid())
  billNumber      String      @unique
  
  merchantId      String
  merchant        Merchant    @relation(fields: [merchantId], references: [id])
  customerSessionId String?
  customerSession CustomerSession? @relation(fields: [customerSessionId], references: [id])
  
  escrowAccountId String?     @unique
  escrowAccount   EscrowAccount? @relation(fields: [escrowAccountId], references: [id])
  
  subtotal        Float
  tax             Float       @default(0)
  totalAmount     Float
  stablecoinAmount Float?
  exchangeRate    Float?
  
  transactionId   String?     @unique
  
  status          BillStatus  @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  
  tipAmount       Float       @default(0)
  tipStablecoin   Float       @default(0)
  waiterId        String?
  
  items           BillItem[]
  tip             Tip?
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model BillItem {
  id        String  @id @default(uuid())
  billId    String
  bill      Bill    @relation(fields: [billId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  
  quantity  Int
  price     Float
  notes     String?
  
  createdAt DateTime @default(now())
}

model Tip {
  id              String    @id @default(uuid())
  billId          String    @unique
  bill            Bill      @relation(fields: [billId], references: [id], onDelete: Cascade)
  waiterId        String
  waiter          Waiter    @relation(fields: [waiterId], references: [id])
  
  amount          Float
  stablecoinAmount Float
  
  tipEscrowWallet String    @unique
  
  transactionId   String?   @unique
  
  status          TipStatus @default(PENDING)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model RestaurantDetails {
  id            String    @id @default(uuid())
  merchantId    String    @unique
  merchant      Merchant  @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  
  cuisineType   String[]
  operatingHours String
  
  hasTakeaway   Boolean   @default(true)
  hasDineIn     Boolean   @default(true)
  
  defaultTipPercentage Float @default(10)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model GeneralStoreDetails {
  id              String    @id @default(uuid())
  merchantId      String    @unique
  merchant        Merchant  @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  
  categories      String[]
  operatingHours  String
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum Shop_type {
  Restaurant
  General_Store
}

enum BillStatus {
  PENDING
  PAID
  CANCELLED
  EXPIRED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum TipStatus {
  PENDING
  PAID
  FAILED
} 